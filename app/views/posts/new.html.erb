<div class="main posts-new">
  <div class="container">
<div><img id=img></div>
    <h1 class="form-heading">投稿する</h1>

    <%= form_tag("/s17874ty/painter/posts/create",{multipart: true}) do %>
    <div class="form">
      <div class="form-body" >

        <% @post.errors.full_messages.each do |message| %>
          <div class="form-error">
            <%= message %>
          </div>
        <% end %>
        <p>：タイトル<p>
        <textarea name="title"></textarea>
        <p>：説明文<p>
        <textarea name="content"><%= @post.content %></textarea>
        <input name="illust" type="file" id="nyan">
        <input type="submit">

        <%end%>
      </div>

    </div>
  <div id=hoge></div>
  </div>
</div>
<script>
    window.onload = function() {
      createPainter(document.getElementById('hoge'), 800, 600);
    };
    function createPainter(parent, width, height) {
	// タイトル
	var [canvas,ctx] = createCanvas(width, height);
	// ツールバー：controlsオブジェクトのプロパティを巡回して登録
	var toolbar = elt("div", null);
	for(var name in controls) {
		toolbar.appendChild(controls[name](ctx));
	}
	toolbar.style.fontSize = "small";
	toolbar.style.marginBottom = "3px";
	// toolbar要素とcanvas要素を、指定した要素（parent）の子要素として挿入する
	parent.appendChild(elt("div", null, toolbar, canvas));
}
function createCanvas(canvasWidth,canvasHeight) {
	var canvas = elt("canvas", { width: canvasWidth, height: canvasHeight });
	var ctx = canvas.getContext("2d");
	canvas.style.border = "1px solid gray";
	canvas.style.cursor = "pointer";
	// 描画ツールをmousedownリスナーとして登録
	canvas.addEventListener("mousedown", function(e) {
		// Firefox対策：カラー選択のchangeイベントを強制的に発生させる
		var event = document.createEvent("HTMLEvents");
		event.initEvent("change", false, true);
		colorInput.dispatchEvent(event);
		// 選択された描画ツールを初期化
		paintTools[paintTool](e,ctx);
	}, false);
	return [canvas,ctx];
}
/*--------------------------------------------------------------------------------*
 * ユーティリティ
 *--------------------------------------------------------------------------------*/
// * elementの左上角からのマウスの相対位置を取得
function relativePosition(event, element) {
	var rect = element.getBoundingClientRect();
	return { x: Math.floor(event.clientX - rect.left),
			 y: Math.floor(event.clientY - rect.top ) };
}
/*--------------------------------------------------------------------------------*
 * ペイントツール
 *   paintToolsのメソッドは、使用する描画ツールです。
 *   描画ツールは、描画を開始するための各種設定と、イベントリスなの登録を行います。
 *   各メソッドは、controls.painterで自動的にツール選択のメニューに取り込まれます。
 *   メニューで選択されたツールは、変数paintToolに格納され、描画時に使用されます。
 *   描画ツールを追加する場合は、paintToolsのメソッドに新しい描画ツールを追加するだけで済みます。
 *--------------------------------------------------------------------------------*/
var paintTool;	// 選択されたペイントツール（controls.painterで選択）
var paintTools = Object.create(null);	// ペイントツールオブジェクト
// * brush：ブラシツール
paintTools.brush = function(e, ctx) {
	ctx.lineCap   = "round";
	ctx.lineJoin  = "round";
	// Canvasの画面をimgに保存
	var img = ctx.getImageData(0, 0, ctx.canvas.width, ctx.canvas.height);
	// canvas要素に対するマウスポインタの相対位置を取得
	var p = relativePosition(e, ctx.canvas);
	// パスの定義開始
	ctx.beginPath();
	ctx.moveTo(p.x,p.y);
	// ドラッグリスナの登録
	setDragListeners(ctx, img, function(q) {
		ctx.lineTo(q.x,q.y);	// パスを追加
		ctx.stroke();		// パスを描画
	});
};
// * line：線を描くツール
paintTools.line = function(e, ctx) {
	ctx.lineCap = "round";
	var img = ctx.getImageData(0, 0, ctx.canvas.width, ctx.canvas.height);
	var p = relativePosition(e, ctx.canvas);
	setDragListeners(ctx, img, function(q) {
		ctx.beginPath();
		ctx.moveTo(p.x,p.y); ctx.lineTo(q.x,q.y);
		ctx.stroke();
	});
};
// * circle：円個を描くツール
paintTools.circle = function(e, ctx) {
	var img = ctx.getImageData(0, 0, ctx.canvas.width, ctx.canvas.height);
	var p = relativePosition(e,ctx.canvas);
	setDragListeners(ctx, img, function(q) {
		var dx = q.x - p.x;
		var dy = q.y - p.y;
		var r = Math.sqrt(dx*dx+dy*dy);
		ctx.beginPath();
		ctx.arc(p.x, p.y, r, 0, 2*Math.PI, false);
		ctx.stroke();
	});
};
// * circleFill：塗りつぶした円を描くツール
paintTools.circleFill = function(e, ctx) {
	var img = ctx.getImageData(0, 0, ctx.canvas.width, ctx.canvas.height);
	var p = relativePosition(e,ctx.canvas);
	setDragListeners(ctx, img, function(q) {
		var dx = q.x - p.x;
		var dy = q.y - p.y;
		var r = Math.sqrt(dx*dx+dy*dy);
		ctx.beginPath();
		ctx.arc(p.x, p.y, r, 0, 2*Math.PI,false);
		ctx.fill();
	});
};
 function setDragListeners(ctx,img,draw) {
 	// mousemoveリスナーを登録
 	var mousemoveEventListener = function(e) {
		// 保存しておいたイメージを復帰させる
		ctx.putImageData(img, 0, 0);
		// 指定された描画関数drawでマウス位置まで描画する
		draw(relativePosition(e, ctx.canvas));
 	};
 	document.addEventListener("mousemove", mousemoveEventListener, false);
 	// mouseupリスナーを登録
	document.addEventListener("mouseup", function(e) {
		// 保存しておいたイメージを復帰させる
		ctx.putImageData(img, 0, 0);
		// 指定された描画関数drawでマウス位置まで描画する
		draw(relativePosition(e, ctx.canvas));
		//　mousemove,mouseupイベントリスナーを削除
		document.removeEventListener("mousemove", mousemoveEventListener, false);
		document.removeEventListener("mouseup", arguments.callee, false);
	},false);
 }
var controls = Object.create(null);
var colorInput;
controls.painter = function(ctx) {
	var DEFAULT_TOOL = 0;
	var select = elt("select", null);
	var label = elt("label", null, "描画ツール：", select);
	for(var name in paintTools) {
		select.appendChild(elt("option", {value: name}, name));
	}
	select.selectedIndex = DEFAULT_TOOL;
	paintTool = select.children[DEFAULT_TOOL].value;
	select.addEventListener("change", function(e) {
		paintTool = this.children[this.selectedIndex].value;
	},false);
	return label;
};
controls.color = function(ctx) {
	var input = colorInput = elt("input", {type: "color"});
	var label = elt("label", null, " 色：", input);
	input.addEventListener("change", function(e) { //注：Firefoxではchangeイベントが発生しない
		ctx.strokeStyle = this.value;
		ctx.fillStyle = this.value;
	},false);
	return label;
};
controls.brushsize = function(ctx) {
	var size = [1,2,3,4,5,6,8,10,12,14,16,20,24,28];
	var select = elt("select", null);
	for(var i=0; i<size.length; i++) {
		select.appendChild(elt("option",{value:size[i].toString()},size[i].toString()));
	}
	select.selectedIndex = 2;
	ctx.lineWidth = size[select.selectedIndex];
	var label = elt("label",null," 線幅：",select);
	select.addEventListener("change", function(e) {
		ctx.lineWidth = this.value;
	},false);
	return label;
};
controls.alpha = function(ctx) {
	var input = elt("input", {type:"number",min:"0", max:"1",step:"0.05",value:"1"});
	var label = elt("label", null, " 透明度：", input);
	input.addEventListener("change", function(e) {
		ctx.globalAlpha = this.value;
	},false);
	return label;
};
controls.save = function(ctx) {
	var input = elt("input", {type: "button", value:"投稿"});
	var label = elt("label", null, " ", input);
	input.addEventListener("click", function(e) {
		var png = ctx.canvas.toDataURL("image/jpeg");
		document.getElementById("img").src = png;
	}, false);
	return label;
};


function elt(name, attributes) {
	var node = document.createElement(name);
	if( attributes ) {
		for(var attr in attributes) {
			if(attributes.hasOwnProperty(attr)) {
				node.setAttribute(attr,attributes[attr]);
			}
		}
	}
	for(var i=2; i<arguments.length; i++) {
		var child = arguments[i];
		if( typeof child == "string" ) {
			child = document.createTextNode(child);
		}
		node.appendChild(child);
	}
	return node;
}
  </script>
<div> </div>
